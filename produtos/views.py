# produtos/views.py
from produtos.models import Produto, Variacao, Banner, MensagemTopo
from django.shortcuts import render
from produtos.models import Produto
from django.core.paginator import Paginator
from django.shortcuts import render, get_object_or_404
from django.db.models import Q, Exists, OuterRef
from produtos.models import Produto, Variacao
from decimal import Decimal
from produtos.models import Produto, Categoria
from django.utils import timezone
import json
from collections import defaultdict
from django.views.decorators.cache import cache_page

@cache_page(600)
def home(request):
    query = request.GET.get('q', '')

    # üõë OTIMIZA√á√ÉO CR√çTICA (N+1 Solution)
    # prefetch_related carrega promo√ß√µes e varia√ß√µes em poucas consultas eficientes,
    # em vez de uma consulta separada para CADA produto no loop.
    produtos_list = Produto.objects.filter(
        disponivel=True
    ).filter(
        Q(estoque__gt=0) | Exists(
            Variacao.objects.filter(produto=OuterRef('pk'), estoque__gt=0)
        )
    ).prefetch_related('promocoes', 'variacoes') # <-- 2. A CHAVE DA VELOCIDADE

    if query:
        produtos_list = produtos_list.filter(nome__icontains=query)

    produtos_list = produtos_list.order_by('-id')
    paginator = Paginator(produtos_list, 200)
    page = request.GET.get('page')
    produtos = paginator.get_page(page)

    # O loop abaixo agora √© R√ÅPIDO porque as promo√ß√µes j√° foram pr√©-carregadas
    agora = timezone.now()
    for p in produtos:
        # Acessar p.promocoes.all() √© r√°pido aqui
        p.tem_promocao = any(
            promo.esta_vigente() for promo in p.promocoes.all()
        )

    # üí° Otimiza√ß√£o Adicional: Use .only() para Banners/Mensagens, carregando apenas campos essenciais
    mensagens_topo = MensagemTopo.objects.filter(ativo=True).only('texto', 'ordem')
    banners = Banner.objects.filter(ativo=True).only('titulo', 'imagem', 'imagem_mobile', 'link', 'link_mobile')


    return render(request, 'produtos/home.html', {
        'produtos': produtos,
        'query': query,
        'titulo': 'Doce & Bella E-commerce',
        # envia os dados para o template:
        'mensagens_topo': mensagens_topo,
        'banners': banners,
    })

# --------------------------------------------------------------------------------------
# üéØ OTIMIZA√á√ÉO 1: Listar por Categoria (N+1 Resolvido + Cache)
# --------------------------------------------------------------------------------------
@cache_page(600) # Cacheia a p√°gina de categoria por 10 minutos
def listar_por_categoria(request, categoria_slug):
    # select_related para a categoria √© R√ÅPIDO porque s√≥ h√° uma
    categoria = get_object_or_404(Categoria, slug=categoria_slug)
    
    # üõë OTIMIZA√á√ÉO CR√çTICA AQUI: Adicionar prefetch_related para resolver N+1
    produtos_list = Produto.objects.filter(
        categoria=categoria, 
        disponivel=True
    ).prefetch_related('promocoes', 'variacoes').order_by('-id')

    # Mantendo a pagina√ß√£o para listas grandes
    paginator = Paginator(produtos_list, 20) # 20 itens por p√°gina √© um bom padr√£o
    page = request.GET.get('page')
    produtos = paginator.get_page(page)

    # O loop de promo√ß√£o tamb√©m √© r√°pido agora
    agora = timezone.now()
    for p in produtos:
        p.tem_promocao = any(
            promo.esta_vigente() for promo in p.promocoes.all()
        )
    
    return render(request, 'produtos/listar_categoria.html', {
        'categoria': categoria,
        'produtos': produtos,
        'titulo': f'{categoria.nome} | Doce & Bella'
    })


# --------------------------------------------------------------------------------------
# üéØ OTIMIZA√á√ÉO 2: Detalhe do Produto (N+1 Resolvido + Cache)
# --------------------------------------------------------------------------------------
@cache_page(300) # Cacheia a p√°gina de detalhes por 5 minutos
def detalhe_produto(request, slug):
    # üõë OTIMIZA√á√ÉO PRINCIPAL: select_related para Categoria e prefetch_related para Varia√ß√µes e Promo√ß√µes
    produto = get_object_or_404(
        Produto.objects.select_related('categoria').prefetch_related('variacoes', 'promocoes', 'galeria_imagens'), 
        slug=slug, 
        disponivel=True
    )

    # O c√≥digo abaixo √© R√ÅPIDO porque as varia√ß√µes, promo√ß√µes e galeria j√° foram carregadas
    
    # 1. ESTOQUE TOTAL E VARIA√á√ïES
    variacoes = produto.variacoes.all() # R√ÅPIDO!
    
    if produto.usa_variacoes:
        estoque_total = sum(v.estoque for v in variacoes)
    else:
        estoque_total = produto.estoque

    cores = sorted(set(v.cor for v in variacoes if v.cor))
    tamanhos = sorted(set(v.tamanho for v in variacoes if v.tamanho))
    outros = sorted(set(v.outro for v in variacoes if v.outro))

    # 2. MONTA O JSON DE VARIA√á√ïES (R√ÅPIDO)
    variacoes_json = json.dumps([
        {
            "id": v.id,
            "cor": v.cor or "",
            "tamanho": v.tamanho or "",
            "outro": v.outro or "",
            "estoque": v.estoque,
            "imagem": v.get_imagem_url(),
        }
        for v in variacoes
    ], cls=DjangoJSONEncoder)

    # 3. C√ÅLCULO DE PARCELAMENTO (L√≥gica Python)
    # OBS: Recomenda-se usar p.get_preco_final, que deve estar otimizado com @cached_property na Model.
    preco = produto.get_preco_final or Decimal('0') # Se usar @cached_property, √© acessado como atributo
    valor_final = preco / Decimal('0.8872')
    valor_parcela = valor_final / Decimal('3')

    # 4. PROMO√á√ÉO ATIVA (R√ÅPIDO)
    promo_ativa = None
    for promo in produto.promocoes.all(): # R√ÅPIDO!
        if promo.esta_vigente():
            promo_ativa = promo
            break

    # 5. PRODUTOS RELACIONADOS (OTIMIZADOS)
    # Adicionando prefetch_related para carregar promo√ß√µes e varia√ß√µes dos relacionados tamb√©m.
    produtos_relacionados = Produto.objects.filter(
        categoria=produto.categoria,
        disponivel=True,
        # Filtro de estoque removido aqui se o filtro de produtos_list (acima) j√° √© suficiente, 
        # mas mantido para garantir s√≥ relacionados dispon√≠veis.
        Q(estoque__gt=0) | Exists(
             Variacao.objects.filter(produto=OuterRef('pk'), estoque__gt=0)
        )
    ).exclude(
        id=produto.id
    ).order_by('?')[:4].prefetch_related('promocoes', 'variacoes') # <-- OTIMIZA√á√ÉO

    # Contexto
    context = {
        'produto': produto,
        'cores': cores,
        'tamanhos': tamanhos,
        'outros': outros,
        'variacoes': variacoes,
        'produtos_relacionados': produtos_relacionados,
        'valor_parcela': valor_parcela,
        'promo_ativa': promo_ativa,
        'variacoes_json': variacoes_json,
        'estoque_total': estoque_total,
        'galeria_imagens': produto.galeria_imagens.all(), # R√ÅPIDO!
        'titulo': f'{produto.nome} | Doce & Bella',
    }

    return render(request, 'produtos/detalhe_produto.html', context)



