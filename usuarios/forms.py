# G:\projeto\usuarios\forms.py

from django import forms
# Importa o AuthenticationForm padr√£o para criar o nosso form de login customizado
from django.contrib.auth.forms import UserCreationForm, UserChangeForm, AuthenticationForm 

# Importe o seu modelo de usu√°rio customizado
from .models import Cliente 

# =========================================================================
# 1. FORMUL√ÅRIO DE CADASTRO (CadastroClienteForm)
# =========================================================================

class CadastroClienteForm(UserCreationForm):
    # Campos extras que n√£o est√£o no UserCreationForm padr√£o:
    nome_completo = forms.CharField(max_length=150, required=True, 
                                    label='Nome completo',
                                    widget=forms.TextInput(attrs={'placeholder': 'ex.: Maria Perez', 'class': 'custom-input'}))
    
    # üö® CORRE√á√ÉO: Aumentar max_length para acomodar 27 caracteres ou mais
    # (20 caracteres √© muito pouco para telefone com m√°scara ou c√≥digo de pa√≠s)
    telefone = forms.CharField(max_length=30, required=False, 
                               label='Telefone (opcional)',
                               widget=forms.TextInput(attrs={'placeholder': 'ex.: 11971923030', 'class': 'custom-input'}))

    class Meta(UserCreationForm.Meta):
        # Use o seu modelo de usu√°rio
        model = Cliente 
        
        # Inclua todos os campos que voc√™ deseja no formul√°rio.
        # As senhas (password1 e password2) s√£o herdadas automaticamente do UserCreationForm.
        # Se voc√™ definiu USERNAME_FIELD = 'email', n√£o inclua 'username' na lista de fields.
        fields = ('nome_completo', 'email', 'telefone') 
        
    def save(self, commit=True):
        # Chama o save() da classe pai (UserCreationForm) que lida com o hashing de senha.
        user = super().save(commit=False)
        
        # üö® ADI√á√ÉO: Se o seu modelo de usu√°rio Cliente ainda requer o campo 'username'
        # e voc√™ est√° usando 'email' para logar, voc√™ deve preencher 'username'
        # com o valor do 'email' antes de salvar.
        # Isso √© necess√°rio apenas se o seu modelo Cliente ainda tiver um campo 'username'
        # e o USERNAME_FIELD no settings.py estiver definido como 'email'.
        user.username = self.cleaned_data["email"] 
        
        if commit:
            user.save()
        return user

# =========================================================================
# 2. FORMUL√ÅRIO DE LOGIN (LoginForm) - NECESS√ÅRIO PARA AUTENTICAR POR E-MAIL
# =========================================================================

class LoginForm(AuthenticationForm):
    # O AuthenticationForm padr√£o usa o campo 'username'.
    # Aqui, n√≥s o redefinimos para se comportar como um campo de 'E-mail'.
    username = forms.EmailField(
        label="E-mail",
        max_length=254,
        widget=forms.EmailInput(attrs={'autofocus': True, 'class': 'custom-input', 'placeholder': 'seu-email@email.com.br'})
    )
    
    # Redefinimos a senha para aplicar classes CSS customizadas, se necess√°rio.
    password = forms.CharField(
        label="Senha",
        strip=False,
        widget=forms.PasswordInput(attrs={'class': 'custom-input', 'placeholder': 'sua senha'})
    )

    # Nota: N√£o √© necess√°rio um m√©todo 'clean' ou 'save' aqui, pois 
    # a autentica√ß√£o √© feita na view com 'authenticate()'.

# =========================================================================
# 3. FORMUL√ÅRIO DE EDI√á√ÉO (ClienteChangeForm)
# =========================================================================

class ClienteChangeForm(UserChangeForm):
    class Meta:
        # Use o seu modelo de usu√°rio
        model = Cliente 
        fields = ('nome_completo', 'email', 'telefone', 'is_active', 'is_staff')